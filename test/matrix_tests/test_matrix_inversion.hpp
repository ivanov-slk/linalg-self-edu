#pragma once
#include "matrix_tests_utilities.hpp"

TEST(MatrixInversionTests, Inversion1) {
    Matrix<double> input_matrix{std::vector<std::vector<double>>{
        {1., 7., 3.}, {7., 4., -5.}, {3., -5., 6.}}};
    // most of these are kind of wrong, according to numpy/tensorflow
    Matrix<double> correct{std::vector<std::vector<double>>{
        {0.0018513643, 0.10535964, 0.086877048},
        {0.10535964, 0.0055443528, -0.048061009},
        {0.086877048, -0.048061009, 0.083177298}}};
    compare_two_matrices(correct,
                         MatrixInverter<double>()(input_matrix, false));
}

TEST(MatrixInversionTests, Inversion2) {
    Matrix<double> input_matrix{std::vector<std::vector<double>>{
        {52, 30, 49, 28}, {30, 50, 8, 44}, {49, 8, 46, 16}, {28, 44, 16, 22}}};
    Matrix<double> correct{std::vector<std::vector<double>>{
        {-0.14614309, 0.0160122, 0.13296903, 0.05727115},
        {0.0160122, -0.02001525, -0.0273224, 0.03952218},
        {0.13296903, -0.0273224, -0.10078931, -0.04128719},
        {0.05727115, 0.03952218, -0.04128719, -0.07645331}}};

    compare_two_matrices(correct,
                         MatrixInverter<double>()(input_matrix, false));
}

TEST(MatrixInversionTests, InversionThrows) {
    Matrix<double> input_matrix{std::vector<std::vector<double>>{
        {0.70000, 0.70711}, {0.70001, 0.70711}}};
    ASSERT_THROW(MatrixInverter<double>()(input_matrix, false),
                 BadMatrixPropertiesException);
}

TEST(MatrixInversionTests, PseudoInversion1) {
    Matrix<double> input_matrix{
        std::vector<std::vector<double>>{{1., 0.}, {1., 0.}}};
    Matrix<double> correct{
        std::vector<std::vector<double>>{{0.5, 0.5}, {0., 0.}}};
    compare_two_matrices(correct, MatrixInverter<double>()(input_matrix, true));
}

TEST(MatrixInversionTests, PseudoInversion2) {
    Matrix<double> input_matrix{
        std::vector<std::vector<double>>{{1., 0.}, {2., 0.}}};
    Matrix<double> correct{
        std::vector<std::vector<double>>{{0.2, 0.4}, {0., 0.}}};
    compare_two_matrices(correct, MatrixInverter<double>()(input_matrix, true));
}

TEST(MatrixInversionTests, PseudoInversion3) {
    Matrix<double> input_matrix{
        std::vector<std::vector<double>>{{1., 0.}, {0., 1.}, {0., 1.}}};
    Matrix<double> correct{
        std::vector<std::vector<double>>{{1., 0., 0.}, {0., 0.5, 0.5}}};
    compare_two_matrices(correct, MatrixInverter<double>()(input_matrix, true));
}

TEST(MatrixInversionTests, PseudoInversion4) {
    Matrix<double> input_matrix{std::vector<std::vector<double>>{
        {0.86241934, 0.5866574, 0.94415351, 0.95913979, 0.57817677, 0.07278982,
         0.28534244, 0.38991106, 0.48926299, 0.77889176, 0.58739383,
         0.58562396},
        {0.69579187, 0.8184742, 0.95403868, 0.70009981, 0.72863983, 0.87054734,
         0.00700839, 0.51955805, 0.24494876, 0.00913428, 0.62315273,
         0.74775413},
        {0.0376125, 0.63047029, 0.62685091, 0.1867411, 0.96285834, 0.09739992,
         0.36992739, 0.83374358, 0.86656391, 0.61512142, 0.01648683,
         0.83992228},
        {0.22468401, 0.85168212, 0.59572482, 0.36909552, 0.28382396, 0.46474211,
         0.50741494, 0.77482981, 0.90446926, 0.55446397, 0.87251927, 0.2390214},
        {0.83727052, 0.8552703, 0.77537903, 0.06745897, 0.5784097, 0.56597316,
         0.00725802, 0.76099983, 0.9385663, 0.84593431, 0.5087011, 0.78185199},
        {0.17423635, 0.85732904, 0.09456392, 0.18200017, 0.58213928, 0.21300842,
         0.80850167, 0.95509432, 0.83585875, 0.96105367, 0.56022622,
         0.91146054},
        {0.70928634, 0.15909755, 0.80498221, 0.35396237, 0.9612137, 0.22607597,
         0.47827131, 0.9842321, 0.83937253, 0.34454389, 0.34726802, 0.32151192},
        {0.64144357, 0.44658854, 0.29396261, 0.88095878, 0.29533763, 0.79838997,
         0.66401749, 0.1232656, 0.58186345, 0.88852325, 0.77762592, 0.42800054},
        {0.23381297, 0.39105056, 0.38818798, 0.14727913, 0.91586005, 0.70422632,
         0.25997505, 0.4047002, 0.02457386, 0.57705152, 0.08427544, 0.63041667},
        {0.19091217, 0.9578817, 0.83071261, 0.09907552, 0.73015429, 0.89125735,
         0.62325908, 0.70676938, 0.30811692, 0.11942618, 0.09728838,
         0.85793685}}};
    Matrix<double> correct{std::vector<std::vector<double>>{
        {0.23819106, -0.07957797, -1.00254019, -0.91300298, 0.63083787,
         0.43268388, 0.59789938, 0.03532925, -0.44279328, 0.33589312},
        {0.39573861, -0.02264142, -0.13695333, 0.4099906, 0.07403014,
         0.12912976, -0.62143583, -0.43306177, -0.0307642, 0.33361836},
        {0.76770871, -0.70801562, 0.04008947, 0.58584541, 0.08049433,
         -0.9201608, -0.08902583, -0.31728393, 0.14948421, 0.66815402},
        {0.08714579, 0.60771052, 0.7014111, -0.119824, -0.66304533, -0.07364341,
         -0.14460219, 0.4793225, -0.34095636, -0.38749918},
        {-0.20039766, 0.32682917, 0.37803771, 0.14421034, -0.39201475,
         -0.08397319, 0.23500547, -0.17153867, 0.85753709, -0.6211266},
        {-0.80941308, 0.10798233, 0.08942888, 0.09912947, 0.22924222,
         -0.50452334, 0.0017779692, 0.67320215, 0.26484433, 0.12817221},
        {0.34352887, -0.7594609, -0.56206482, -0.20850397, -0.42791326,
         0.28820957, 0.43000942, 0.26701834, -0.32609221, 1.04500334},
        {-0.05760289, 0.22203558, -0.59533842, 0.24557783, -0.1458912,
         0.62670429, 0.48560425, -0.68292795, 0.24394127, -0.18573182},
        {-0.8476344, 0.13409967, 1.23668904, -0.20547323, 0.37970242,
         -0.50858723, 0.109712, 0.91290787, -1.07438757, -0.1720886},
        {0.55782296, -0.89330325, -0.12898736, 0.47017601, 0.30090277,
         -0.25004933, -0.37955508, -0.10097468, 1.00813751, -0.1940982},
        {-0.08116348, 0.60160486, -0.55044683, 0.66485922, -0.2519447,
         0.49072267, 0.0085867215, -0.38083357, 0.41587791, -0.73289616},
        {-0.20299224, 0.64480493, 0.37653984, -1.15160206, 0.15244681,
         0.69075461, -0.2381363, 0.27215456, -0.74313761, 0.0774024}}};
    // 0.0085867215 was 0.0085867299 in numpy
    // 0.0017779692 was 0.00177797 in numpy
    compare_two_matrices(correct, MatrixInverter<double>()(input_matrix, true));
}